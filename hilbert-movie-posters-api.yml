openapi: 3.0.0

servers:
  - url: https://localhost:5001/api
    description: |
      Local hosting for demos.
info:
  title: Hilbert Movie Posters API    
  version: "1.0.0"
  description: |
    <p align="center">    
      <img src="https://res.cloudinary.com/chaua0927/image/upload/v1570810198/hilbert-poster-images/jsoozfhrsvqlcoejy75t.png" alt="Hilbert Logo"/>
    </p>

    # Summary
    
    `Hilbert` is an open, crowd-sourced community platform for the world of movie posters. Through the Hilbert API, developers can access movie posters, movies, and reviews for viewing and usage.
    
    Data is currently only available in JSON format. Please refer to [jsonapi.org](https://jsonapi.org) or [RFC8259](https://tools.ietf.org/html/rfc8259) for specification details.
    
    The endpoints are implemented as a RESTful interface. See [RFC7231](https://www.rfc-editor.org/rfc/rfc7231.html).
    
    **ATTENTION**: The API is currently under development. Frequent changes may occur.

  contact:
    name: Hilbert Movie Posters
    url: https://github.com/chaua0927/hilbert-movie-posters
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
tags:
  - name: movieposters
    description: |
      ## Summary
      
      __Movie Posters__ are the main objects in Hilbert. 
      
      
      Each entry contains basic information for the poster (e.g.  artist and publishing year), URLs for the publicly hosted image, and a reference to its associated movie.
      
      
      ## **Copyright / Licensing**
      
      Copyright and licensing laws apply to images that are uploaded via Hilbert. Only images licensed under and respecting [Creative Commons](https://creativecommons.org/licenses/) terms are allowed.
  - name: movies
    description: |
      ## Summary
      
      __Movies__ that are referenced by Hilbert movie posters are available for access as well. 
      
      The entries are generated and managed by the server. 
      
      
      Each entry contains basic information for the movie (e.g.  release year and name) and shallow references to its associated movie posters.
  - name: reviews
    description: |
      ## Summary
      
      __Reviews__ are available for viewing access through their movie posters. 
      
      These endpoints are specific for editing operations.
paths:
  /movieposters:
    get:
      tags:
        - movieposters
      operationId: GetMoviePosters
      summary: Gets most recent or, if valid query is provided, matching movie posters
      description: |
        __Note__: Query search not yet implemented.
      parameters:
        - in: query
          name: name
          description: Search by poster name
          required: false
          schema:
            type: string
        - in: query
          name: artist
          description: Search by poster artist
          required: false
          schema:
            type: string
        - in: query
          name: year
          description: Search by poster year
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: movie
          description: Search by poster movie name
          required: false
          schema:
            type: string
        - in: query
          name: rating
          description: Search by poster rating
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: skip
          required: false
          description: Number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 30
        - in: query
          name: limit
          required: false
          description: Maximum number of records to return
          schema:
            type: integer
            format: int32
            default: 30
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoviePoster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - movieposters
      operationId: AddMoviePoster
      summary: Adds a new movie poster
      requestBody:
        required: true
        description: Movie poster form describing poster to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoviePosterForm'
      responses:
        '201':
          description: Provides copy of the added movie poster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePoster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /movieposters/{moviePosterId}:
    parameters:
      - in: path
        name: moviePosterId
        required: true
        description: Id of movie poster to retrieve
        schema: 
          type: integer
          format: int32
    get:
      tags: 
        - movieposters
      operationId: GetMoviePosterById
      summary: Gets one specified movie poster
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoviePoster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - movieposters
      operationId: updateMoviePosterById
      summary: Updates one specified movie poster
      requestBody:
        required: true
        description: Update movie poster schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoviePosterForm'
      responses:
        '200':
          description: Provides copy of the updated movie poster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviePoster'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - movieposters
      operationId: DeleteMoviePosterById
      summary: Deletes one specified movie poster
      parameters:
        - in: path
          name: moviePosterId
          required: true
          description: Deletes one specified movie poster
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Inherent confirmation of deletion
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /movieposters/{moviePosterId}/reviews:
    parameters:
    - in: path
      name: moviePosterId
      required: true
      description: Id of movie poster of review(s)
      schema:
        type: integer
        format: int32
    post:
      tags:
        - reviews
      operationId: AddReview
      summary: Adds a review to movie poster
      requestBody:
        required: true
        description: Review to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewForm'
      responses:
        '201':
          description: Provides copy of the added review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /movieposters/{moviePosterId}/reviews/{reviewId}:
    parameters:
    - in: path
      name: moviePosterId
      required: true
      description: Id of movie poster of review
      schema:
        type: integer
        format: int32
    - in: path
      name: reviewId
      required: true
      description: Id of review
      schema:
        type: integer
        format: int32
    put:
      tags:
        - reviews
      operationId: UpdateReviewById
      summary: Updates one specified review
      requestBody:
        required: true
        description: Update review schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewForm'
      responses:
        '200':
          description: Provides copy of the updated review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - reviews
      operationId: DeleteReviewById
      summary: Deletes one specified review
      responses:
        '204':
          description: Inherent confirmation of deletion
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /movies:
    get:
      tags:
        - movies
      operationId: GetMovies
      summary: Gets matching movies
      description: |
      
      parameters:
        - in: query
          name: name
          description: Search by poster name
          required: false
          schema:
            type: string
        - in: query
          name: year
          description: Search by poster year
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      
  /movies/{movieId}:
    parameters:
        - in: path
          name: movieId
          required: true
          description: Perform action by movie id
          schema:
            type: integer
            format: int32
    get:
      tags:
        - movies
      operationId: GetMovieById
      summary: Gets one specified movie
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - movies
      operationId: UpdateMovieById
      summary: Updates one specified movie
      requestBody:
        required: true
        description: Update movie schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieForm'
      responses:
        '200':
          description: Provides copy of the updated movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  responses:
    BadRequest:
      description: Invalid action parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: User is unauthorized to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    MoviePosterForm:
      type: object
      required:
        - name
        - year
        - artist
        - posterImageUrl
      properties:
        name:
          type: string
          example: Vertigo by Enzo Nistri
        year:
          type: integer
          format: int32
          example: 1984
        artist:
          type: string
          example: Enzo Nistri
        posterImageUrl:
          type: string
          example: https://res.cloudinary.com/chaua0927/image/upload/v1569250610/hilbert-poster-images/bqaylkhfugaqhd4rwsqs.jpg
        movieId:
          type: integer
          example: 2
    MoviePoster:
      type: object
      nullable: true
      required:
        - name
        - year
        - artist
        - posterImageUrl
      properties:
        moviePosterId:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          maxLength: 100
          example: Vertigo by Enzo Nistri
        artist:
          type: string
          maxLength: 100
          example: Enzo Nistri
        year:
          type: integer
          format: int32
          example: 1984
        rating:
          type: integer
          format: int32
          minimum: 0
          maximum: 5
          example: 3
        ratingCount:
          type: integer
          format: int32
          example: 42
        movieId:
          type: integer
          format: int32
          example: 2
        posterImageUrl:
          type: string
          example: https://res.cloudinary.com/chaua0927/image/upload/v1569250610/hilbert-poster-images/bqaylkhfugaqhd4rwsqs.jpg
        movie:
          $ref: '#/components/schemas/Movie'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    ReviewForm:
      type: object
      required:
        - name
        - rating
      properties:
        name:
          type: string
          example: Hauer
        comment:
          type: string
          example: 'Like tears in rain...'
        rating:
          type: integer
          format: int32
          minimum: 0
          maximum: 5
          example: 3
    Review:
      type: object
      nullable: true
      required:
        - name
        - rating
      properties:
        reviewId:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          maxLength: 100
          example: Hauer
        moviePosterId:
          type: integer
          format: int32
          example: 2
        moviePoster:
          $ref: '#/components/schemas/MoviePoster'
        postedDate:
          type: string
          format: DateTime
          example: "2017-07-21T17:32:28Z"
        rating:
          type: integer
          format: int32
          minimum: 0
          maximum: 5
          example: 4
        comment:
          type: string
          maxLength: 255
          example: Like tears in rain...
    MovieForm:
      type: object
      required:
        - name
        - year
      properties:
        name:
          type: string
          maxLength: 100
          example: Highlander
        year:
          type: integer
          format: int32
          example: 1984
    Movie:
      nullable: true
      type: object
      required:
        - name
        - year
        - moviePosters
      properties:
        movieId:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          maxLength: 100
          example: Highlander
        year:
          type: integer
          format: int32
          example: 1984
        moviePosters:
          type: array
          items:
            $ref: '#/components/schemas/MoviePoster'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string